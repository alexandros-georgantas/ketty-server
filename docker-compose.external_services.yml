version: '2'

services:

  db-app:
    image: postgres:14.4-alpine
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=ketida_dev
      - POSTGRES_DB=ketida_dev
      - POSTGRES_PASSWORD=ketida_dev
    volumes:
      - ./scripts/init-pgboss.sql:/docker-entrypoint-initdb.d/init-pgboss.sql
  
  db-epubchecker:
    image: postgres:14.4-alpine
    environment:
      - POSTGRES_USER=epubchecker_user_dev
      - POSTGRES_DB=epubchecker_dev
      - POSTGRES_PASSWORD=epubchecker_user_password
    volumes:
      - ./scripts/init-pgboss.sql:/docker-entrypoint-initdb.d/init-pgboss.sql

  db-icml:
    image: postgres:14.4-alpine
    environment:
      - POSTGRES_USER=icml_user_dev
      - POSTGRES_DB=icml_dev
      - POSTGRES_PASSWORD=icml_user_password
    volumes:
      - ./scripts/init-pgboss.sql:/docker-entrypoint-initdb.d/init-pgboss.sql

  db-pagedjs:
    image: postgres:14.4-alpine
    environment:
      - POSTGRES_USER=pagedjs_user_dev
      - POSTGRES_DB=pagedjs_dev
      - POSTGRES_PASSWORD=pagedjs_user_password
    volumes:
      - ./scripts/init-pgboss.sql:/docker-entrypoint-initdb.d/init-pgboss.sql

  db-xsweet:
    image: postgres:14.4-alpine
    environment:
      - POSTGRES_USER=xsweet_user_dev
      - POSTGRES_DB=xsweet_dev
      - POSTGRES_PASSWORD=xsweet_user_password
    volumes:
      - ./scripts/init-pgboss.sql:/docker-entrypoint-initdb.d/init-pgboss.sql

  s3:
    image: minio/minio:RELEASE.2022-05-26T05-48-41Z
    ports:
      - ${S3_PORT:-9000}:9000
      - ${MINIO_CONSOLE_PORT:-9001}:9001
    volumes:
      - minio_storage:/data
    environment:
      - MINIO_ROOT_USER=${S3_ACCESS_KEY_ID_ADMIN:-admin}
      - MINIO_ROOT_PASSWORD=${S3_SECRET_ACCESS_KEY_ADMIN:-superSecretAdminPassword}
    command: server /data
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '-f',
          'http://localhost:9000/minio/health/live'
        ]
      interval: 30s
      timeout: 20s
      retries: 10

  createbucket:
    image: minio/mc:RELEASE.2022-05-09T04-08-26Z
    depends_on:
      s3:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c " /usr/bin/mc config host add ketida ${S3_PROTOCOL:-http}://${S3_HOST:-s3}:${S3_PORT:-9000} ${S3_ACCESS_KEY_ID_ADMIN:-admin} ${S3_SECRET_ACCESS_KEY_ADMIN:-superSecretAdminPassword}; /usr/bin/mc admin user add ketida/ ${S3_ACCESS_KEY_ID_USER:-ketida} ${S3_SECRET_ACCESS_KEY_USER:-superSecretUserPassword}; /usr/bin/mc admin user enable ketida/ ${S3_ACCESS_KEY_ID_USER:-ketida}; /usr/bin/mc mb ketida/${S3_BUCKET:-uploads}; /usr/bin/mc admin policy set ketida/ readwrite user=${S3_ACCESS_KEY_ID_USER:-ketida}; exit 0; "

  epubchecker:
    depends_on:
      - db-epubchecker
    image: cokoapps/epubchecker:1.1.2
    ports:
      - ${SERVICE_EPUB_CHECKER_PORT:-3001}:${SERVICE_EPUB_CHECKER_PORT:-3001}
    environment:
      - PUBSWEET_SECRET=epubchecker_dev_secret
      - POSTGRES_USER=epubchecker_user_dev
      - POSTGRES_PASSWORD=epubchecker_user_password
      - POSTGRES_HOST=db-epubchecker
      - POSTGRES_DB=epubchecker_dev
      - POSTGRES_PORT=5432
      - SERVER_PORT=${SERVICE_EPUB_CHECKER_PORT:-3001}
    entrypoint:
      [
        'sh',
        'scripts/wait-for-it',
        'db-epubchecker:5432',
        '--',
        'sh',
        'scripts/setupDevServer.sh'
      ]
    command: [ 'node', 'server/startServer.js' ]

  icml:
    depends_on:
      - db-icml
    image: cokoapps/icml:1.2.1
    ports:
      - ${SERVICE_ICML_PORT:-3002}:${SERVICE_ICML_PORT:-3002}
    environment:
      - PUBSWEET_SECRET=icml_dev_secret
      - POSTGRES_USER=icml_user_dev
      - POSTGRES_PASSWORD=icml_user_password
      - POSTGRES_HOST=db-icml
      - POSTGRES_DB=icml_dev
      - POSTGRES_PORT=5432
      - SERVER_PORT=${SERVICE_ICML_PORT:-3002}
      - NODE_ENV=development
    entrypoint:
      [
        'sh',
        'scripts/wait-for-it',
        'db-icml:5432',
        '--',
        'sh',
        'scripts/setupDevServer.sh'
      ]
    command: [ 'node', 'server/startServer.js' ]

  pagedjs:
    depends_on:
      - db-pagedjs
    image: cokoapps/pagedjs:1.4.7
    ports:
      - ${SERVICE_PAGEDJS_PORT:-3003}:${SERVICE_PAGEDJS_PORT:-3003}
    environment:
      - PUBSWEET_SECRET=pagedjs_dev_secret
      - POSTGRES_USER=pagedjs_user_dev
      - POSTGRES_PASSWORD=pagedjs_user_password
      - POSTGRES_HOST=db-pagedjs
      - POSTGRES_DB=pagedjs_dev
      - POSTGRES_PORT=5432
      - SERVER_PORT=${SERVICE_PAGEDJS_PORT:-3003}
      - NODE_ENV=development
      - PUBLIC_URL=http://192.168.10.6:3003
    security_opt:
      - seccomp:unconfined
    entrypoint:
      [
        'dumb-init',
        '--',
        'sh',
        'scripts/wait-for-it',
        'db-pagedjs:5432',
        '--',
        'sh',
        'scripts/setupDevServer.sh'
      ]
    command: [ 'node', 'server/startServer.js' ]

  xsweet:
    depends_on:
      - db-xsweet
    image: cokoapps/xsweet:2.1.2
    ports:
      - ${SERVICE_XSWEET_PORT:-3004}:${SERVICE_XSWEET_PORT:-3004}
    environment:
      - PUBSWEET_SECRET=xsweet_dev_secret
      - POSTGRES_USER=xsweet_user_dev
      - POSTGRES_PASSWORD=xsweet_user_password
      - POSTGRES_HOST=db-xsweet
      - POSTGRES_DB=xsweet_dev
      - POSTGRES_PORT=5432
      - SERVER_PORT=${SERVICE_XSWEET_PORT:-3004}
      - NODE_ENV=development
    entrypoint:
      [
        'sh',
        'scripts/wait-for-it',
        'db-xsweet:5432',
        '--',
        'sh',
        'scripts/setupDevServer.sh'
      ]
    command: [ 'node', 'server/startServer.js' ]
volumes:
  minio_storage:
